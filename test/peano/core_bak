(ns logic.core-test
  (:require [clojure.core.logic :as l])
  (:use midje.sweet
        logic.core))

(unfinished binary-facts binary-relation index-facts index-relation )

(fact
  (data* '[animal :by :name] {:name "betty" :species :bovine :legs 4})
  => '(do (do ...animal-name-relation...
              ...only-animal-name-fact...)
          (do ...animal-species-relation...
              ...only-animal-species-fact...)
          (do ...animal-legs-relation...
              ...only-animal-legs-fact...))
  (provided
    (index-relation 'animal-name 'Name) => ...animal-name-relation...
    (index-facts 'animal-name 'Name ["betty"]) => [...only-animal-name-fact...]

    (binary-relation 'animal-species 'Name 'Species) => ...animal-species-relation...
    (binary-facts 'animal-species 'Name ["betty"] 'Species [:bovine]) => ...only-animal-species-fact...
         
    (binary-relation 'animal-species 'Name 'Species) => ...animal-legs-relation...
    (binary-facts 'animal-species 'Name ["betty"] 'Species [:bovine]) => ...only-animal-legs-fact...))
         


;; (data animal
;;       {:name "betty" :species :bovine}
;;       {:name "hank" :species :equine})

;; (fact "data statements generate relations and facts"
;;   (l/run* [q] (animal-name-o q)) => (just "hank" "betty" :in-any-order)
;;   (l/run* [q] (animal-name-o "hank")) =not=> empty?
;;   (l/run* [q] (animal-species-o q :bovine)) => (just "betty"))

;; (data procedure
;;       {:name "hoof trim", :species :equine}
;;       {:name "superovulation", :species :bovine})

;; (defn procedure-applies-to-animal-o [animal procedure]
;;   (l/fresh [species]
;;      (animal-species-o animal species)
;;      (procedure-species-o procedure species)))


;; (defn animal-name-all []
;;   (l/run* [q]
;;           (animal-name-o q)))

;; (defn animal-name-n [n]
;;   (l/run n [q]
;;           (animal-name-o q)))

;; (defn one-animal-name-n []
;;   (animal-name-n 1))




  


;; (defn animal-name?? [name]
;;   (l/run* [q]
;;           (animal-name-o name)))
;; ;; (println (animal-name>>))




;; (defn animal-


;; (fact
;;   (l/run* [q]
;;     (l/fresh [animal procedure]
;;       (animal-name-o animal)
;;       (procedure-name-o procedure)
;;       (procedure-applies-to-animal-o animal procedure)
;;       (l/== [animal procedure] q)))
;;   => (just ["betty" "superovulation"]
;;            ["hank" "hoof trim"]
;;            :in-any-order))
