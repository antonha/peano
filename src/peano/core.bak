(ns logic.core
  (:refer-clojure :exclude [==])
  (:use [clojure.core.logic]))


(defn relation-name [prefix-symbol suffix-key]
  (symbol (str (name prefix-symbol) "-" (name suffix-key) "-o")))

(defn binary-relation-definition [type-name-prefix relation-suffix]
  `(defrel ~(relation-name type-name-prefix relation-suffix)
           name
           ~(symbol (name relation-suffix))))

(defn unary-relation-definition [type-name-prefix relation-suffix]
  `(defrel ~(relation-name type-name-prefix relation-suffix)
           ~(symbol (name relation-suffix))))

(defn binary-fact-definition [type-name property example]
  `(fact ~(relation-name type-name property)
         ~(:name example)
         ~(property example)))

(defn unary-fact-definition [type-name property example]
  `(fact ~(relation-name type-name property)
         ~(property example)))

(defn binary-relation-and-facts [type-name property examples]
  (let [relation (binary-relation-definition type-name property)
        facts (map (fn [example]
                     (binary-fact-definition type-name property example))
                   examples)]
    `(do ~relation ~@facts)))

(defn unary-relation-and-facts [type-name property examples]
  (let [relation (unary-relation-definition type-name property)
        facts (map (fn [example]
                     (unary-fact-definition type-name property example))
                   examples)]
    `(do ~relation ~@facts)))

(defn binary-relations-and-facts [type-name examples]
  (let [property-keys (keys (dissoc (first examples) :name))]
    (map (fn [property]
           (binary-relation-and-facts type-name property examples))
         property-keys)))

(defmacro data [type-name & examples]
  `(do
     ~(unary-relation-and-facts type-name :name examples)
     ~@(binary-relations-and-facts type-name examples)))
